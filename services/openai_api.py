import os
from openai import OpenAI

client = OpenAI(
    api_key=os.environ.get("OPENAI_API_KEY"),
)

user_conversations = {}

async def obtener_recomendacion(response,ciudad):
    # Obtener la descripci칩n del clima
    descripcion = response['weather'][0]['description']
    # Construir el prompt con la descripci칩n del clima
    prompInstructions = f"El clima es: {descripcion}. y la ciudad en la que estamos es {ciudad}."	
    prompInput = f"Da 5 recomendaciones para una persona en esta condici칩n clim치tica y 5 lugares tur칤sticos para ir en esas condiciones clim치ticas en esa {ciudad}."

    try:
        # Llamar a la API de OpenAI para obtener una recomendaci칩n
        completion = client.responses.create(
            model="gpt-4o", 
            instructions=prompInstructions,
            input=prompInput
        )
        
        # Obtener la recomendaci칩n de la respuesta
        recomendacion = completion.output_text
        return recomendacion
    
    except Exception as e:
        print(f"Error al obtener recomendaci칩n de OpenAI: {e}")
        return "No se pudo obtener una recomendaci칩n en este momento."

async def analyze_sentiment(conversation: str) -> str:
    prompInstructions = f"Analiza el sentimiento de la siguiente conversaci칩n entre un usuario y un bot. "	
    prompInput = f"Clasifica como positiva, negativa o neutral, y da una breve explicaci칩n de la siguiente conversaci칩n: {conversation}."

    # print(conversation)

    try:
        # Llamar a la API de OpenAI para obtener un an치lisis de sentimiento
        completion = client.responses.create(
            model="gpt-4o", 
            instructions=prompInstructions,
            input=prompInput
        )
        
        # Obtener el an치lisis de la respuesta
        analisis = completion.output_text
        return analisis
    
    except Exception as e:
        print(f"Error al obtener el an치lisis de OpenAI: {e}")
        return "No se pudo obtener un an치lisis en este momento."
    
async def anytext_handler_opneAI(conversation: str) -> str:
    prompInstructions =f"""Vas a recibir una conversaci칩n entre un usuario y un bot. El bot est치 dise침ado 칰nicamente para:

                            1. Hacer recomendaciones de lugares tur칤sticos

                            2. Brindar informaci칩n sobre el clima

                            3. Hacer conteos simples (por ejemplo, cu치ntos lugares hay en una lista)

                            4. Analizar el sentimiento de la conversaci칩n

                            5. Jugar un juego de adivinanza sobre el clima

                            Analiza la conversaci칩n y genera una respuesta que el bot podr칤a dar si el usuario hace una pregunta o solicitud que est치 fuera del alcance de estas funciones.

                            La respuesta del bot debe:

                            Ser muy amigable con un lenguaje sencillo y con confianza

                            Mantener el tono amable y 칰til

                            Disculparse con el usuario por no poder cumplir con su solicitud

                            Redirigir de manera natural y fluida hacia el uso del men칰 usando este emoji 游녢, indicando que es la forma m치s eficiente de interactuar con el bot
                            
                            Si lo que escribe el usuario esta dentro de las funciones del bot, indicale que debe seleccionar una opci칩n del men칰 para que el bot pueda ayudarle."

                            La salida debe ser solo el texto plano del bot, sin explicaciones ni etiquetas adicionales."""	
    prompInput = f"Esta es la conversaci칩n: {conversation}."

    # print(conversation)
    
    try:
        # Llamar a la API de OpenAI para obtener un an치lisis de sentimiento
        completion = client.responses.create(
            model="gpt-4o", 
            instructions=prompInstructions,
            input=prompInput
        )
        
        # Obtener el an치lisis de la respuesta
        analisis = completion.output_text
        return analisis
    
    except Exception as e:
        print(f"Error al obtener el an치lisis de OpenAI: {e}")
        return "No se pudo obtener un an치lisis en este momento."